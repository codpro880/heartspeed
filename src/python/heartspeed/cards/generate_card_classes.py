import json
import os
import requests

this_dir = os.path.dirname(os.path.realpath(__file__))
class JsonCardGenerator:
    """ Responsible for generating C++ classes based on card json """
    def __init__(self):
        self.card_api = "https://api.hearthstonejson.com/v1/latest/enUS/cards.json"
        self.card_json_filename = os.path.join(this_dir, "cards.json")

    def get_cards_from_web(self, write_to_disk=False):
        """ Rope in the live data, it is updated occassionally """
        get_req = requests.get(self.card_api)
        card_json = json.loads(get_req.text)
        if write_to_disk:
            with open(self.card_json_filename, 'w') as f:
                f.write(get_req.text)
        yield from card_json

    def get_cards_from_disk(self, update=False):
        """ Make sure we have some stable set we can draw from """
        if update:
            self.get_cards_from_web(write_to_disk=True)
        with open(self.card_json_filename, 'rb') as f:
            card_json = json.loads(f.read())
        yield from card_json

class CardFactoryGenerator:
    """ Responsible for generating a single C++ factory class based on the cards json """
    def __init__(self, cards_json):
        self.cards_json = cards_json

    def generate_class_file(self, cards_cpp_dir=None):
        if cards_cpp_dir is None:
            this_dir = os.path.dirname(os.path.realpath(__file__))
            cards_cpp_dir = os.path.join(this_dir, "..", "..", "..", "cpp", "cards", "standard")
        factory_cpp_file = os.path.join(cards_cpp_dir, "CardFactory.cpp")
        with open(factory_cpp_file, 'w') as f:
            cpp_str = self._gen_factory_string()
            f.write(cpp_str)

    def _gen_factory_string(self):
        factory = "/**\nTHIS CARD WAS AUTOGENERATED BY " + __file__ + ".\nDO NOT EDIT BY HAND.\n**/"
        factory += """\n#include <string>\n\n#include "BaseCard.hpp"\n#include "CardFactory.hpp"\n"""
        factory += """BaseCard CardFactory::get_card(std::string name) {\n"""

        factory += self._gen_switch_statement()

        factory += """\n\telse {\n\t\tthrow std::runtime_error("No card has name " + name);\n\t}"""
        factory += "\n}"
        return factory

    def _gen_switch_statement(self):
        # TODO: Get rid of copy/pasta
        result = []
        template = '(name == "{0}") {{\n\t\treturn BaseCard("{0}", {1}, "{2}", "{3}", "{4}");\n\t}}'
        if_template = '\tif ' + template
        name = self.cards_json[0]["name"].replace(" ", "")
        cost = self.cards_json[0]["cost"]
        id = self.cards_json[0]["id"]
        text = self.cards_json[0]["text"]
        cls = self.cards_json[0]["cardClass"]
        result.append(if_template.format(name, cost, id, text, cls))
        
        for card_json in self.cards_json[1:]:
            elif_template = '\n\telse if ' + template
            name = "" if "name" not in card_json.keys() else card_json["name"].replace(" ", "").replace("\"", "")
            cost = -1 if "cost" not in card_json.keys() else card_json["cost"]
            id = card_json["id"].replace("\"", "")
            text = "" if "text" not in card_json.keys() else card_json["text"].replace("\n", "").replace("\"", "")
            cls = "" if "cardClass" not in card_json.keys() else card_json["cardClass"]
            result.append(elif_template.format(name, cost, id, text, cls))

        return "".join(result)

class BgCardFactoryGenerator:
    def __init__(self, cards_json):
        self.cards_json = cards_json

    def generate_class_file(self, cards_cpp_dir=None):
        if cards_cpp_dir is None:
            this_dir = os.path.dirname(os.path.realpath(__file__))
            cards_cpp_dir = os.path.join(this_dir, "..", "..", "..", "cpp", "cards", "bgs")
        factory_cpp_file = os.path.join(cards_cpp_dir, "BgCardFactory.cpp")
        with open(factory_cpp_file, 'w') as f:
            cpp_str = self._gen_factory_string()
            f.write(cpp_str)

    def _gen_factory_string(self):
        factory = "/**\nTHIS CARD WAS AUTOGENERATED BY " + __file__ + ".\nDO NOT EDIT BY HAND.\n**/"
        factory += """\n#include <string>\n\n#include "BgBaseCard.hpp"\n#include "BgCardFactory.hpp"\n"""
        factory += """BgBaseCard BgCardFactory::get_card(std::string name) {\n"""

        factory += self._gen_switch_statement()

        factory += """\n\telse {\n\t\tthrow std::runtime_error("No card has name " + name);\n\t}"""
        factory += "\n}"
        return factory

    def _gen_switch_statement(self):
        # TODO: Get rid of copy/pasta
        result = []
        bg_cards = [c for c in self.cards_json if c['set'] == 'BATTLEGROUNDS']
        import pdb; pdb.set_trace()

        def set_defaults(bg_card):
            if 'attack' not in bg_card:
                bg_card['attack'] = -1
            if 'cost' not in bg_card:
                bg_card['cost'] = -1
            if 'health' not in bg_card:
                bg_card['health'] = -1
            if 'mechanics' not in bg_card:
                bg_card['mechanics'] = ''
            if 'race' not in bg_card:
                bg_card['race'] = ''
            if 'rarity' not in bg_card:
                bg_card['rarity'] = ''
            if 'techLevel' not in bg_card:
                bg_card['techLevel'] = -1
            if 'text' not in bg_card:
                bg_card['text'] = ''
            if 'type' not in bg_card:
                bg_card['type'] = ''
                
            if 'BaconUps' in bg_card['id']:
                bg_card['name'] = bg_card['name'] + ' (Golden)'
                
            return bg_card
        
        template = '(name == "{5}") {{\n\t\treturn BgBaseCard({0}, "{1}", {2}, {3}, "{4}", "{5}", "{6}", "{7}", "{8}", {9}, "{10}", "{11}");\n\t}}'
        first = True
        for bg_card in bg_cards:
            if first:
                tplate = '\tif ' + template
                first = False
            else:
                tplate = '\n\telse if ' + template
            bg_card = set_defaults(bg_card)
            switch = tplate.format(bg_card['attack'],
                                   bg_card['cardClass'],
                                   bg_card['cost'],
                                   bg_card['health'],
                                   bg_card['id'],
                                   bg_card['name'],
                                   bg_card['mechanics'],
                                   bg_card['race'],
                                   bg_card['rarity'],
                                   bg_card['techLevel'],
                                   bg_card['text'].replace('\n', ' ').replace('"', '\\"'),
                                   bg_card['type'])
            result.append(switch)

        return "".join(result)



if __name__ == "__main__":
    # cards = JsonCardGenerator().get_cards_from_disk(update=True)
    cards = JsonCardGenerator().get_cards_from_web(write_to_disk=True)
    gen = BgCardFactoryGenerator(list(cards))
    gen.generate_class_file()    
