import json
import os
import requests

this_dir = os.path.dirname(os.path.realpath(__file__))
class JsonCardGenerator:
    """ Responsible for generating C++ classes based on card json """
    def __init__(self):
        self.card_api = "https://api.hearthstonejson.com/v1/latest/enUS/cards.json"
        self.card_json_filename = os.path.join(this_dir, "cards.json")

    def get_cards_from_web(self, write_to_disk=False):
        """ Rope in the live data, it is updated occassionally """
        get_req = requests.get(self.card_api)
        card_json = json.loads(get_req.text)
        if write_to_disk:
            with open(self.card_json_filename, 'w') as f:
                f.write(get_req.text)
        yield from card_json

    def get_cards_from_disk(self):
        """ Make sure we have some stable set we can draw from """
        with open(self.card_json_filename, 'rb') as f:
            card_json = json.loads(f.read())
        yield from card_json

class CardFactoryGenerator:
    """ Responsible for generating a single C++ factory class based on the cards json """
    def __init__(self, cards_json):
        self.cards_json = cards_json

    def generate_class_file(self, cards_cpp_dir=None):
        if cards_cpp_dir is None:
            this_dir = os.path.dirname(os.path.realpath(__file__))
            cards_cpp_dir = os.path.join(this_dir, "..", "..", "..", "cpp", "cards")
        factory_cpp_file = os.path.join(cards_cpp_dir, "CardFactory.cpp")
        with open(factory_cpp_file, 'w') as f:
            cpp_str = self._gen_factory_string()
            f.write(cpp_str)

    def _gen_factory_string(self):
        factory = "/**\nTHIS CARD WAS AUTOGENERATED BY " + __file__ + ".\nDO NOT EDIT BY HAND.\n**/"
        factory += """\n#include <string>\n\n#include "BaseCard.hpp"\n#include "CardFactory.hpp"\n"""
        factory += """BaseCard CardFactory::get_card(std::string name) {\n"""

        factory += self._gen_switch_statement()

        factory += """\n\telse {\n\t\tthrow std::runtime_error("No card has name " + name);\n\t}"""
        factory += "\n}"
        return factory

    def _gen_switch_statement(self):
        # TODO: Get rid of copy/pasta
        result = []
        if_template = '\tif (name == "{0}") {{\n\t\treturn BaseCard("{0}", {1}, "{2}", "{3}");\n\t}}'
        name = self.cards_json[0]["name"].replace(" ", "")
        cost = self.cards_json[0]["cost"]
        id = self.cards_json[0]["id"]
        text = self.cards_json[0]["text"]
        result.append(if_template.format(name, cost, id, text))
        
        for card_json in self.cards_json[1:]:
            elif_template = '\n\telse if (name == "{0}") {{\n\t\treturn BaseCard("{0}", {1}, "{2}", "{3}");\n\t}}'
            name = "" if "name" not in card_json.keys() else card_json["name"].replace(" ", "").replace("\"", "")
            cost = -1 if "cost" not in card_json.keys() else card_json["cost"]
            id = card_json["id"].replace("\"", "")
            text = "" if "text" not in card_json.keys() else card_json["text"].replace("\n", "").replace("\"", "")
            result.append(elif_template.format(name, cost, id, text))

        return "".join(result)

if __name__ == "__main__":
    cards = JsonCardGenerator().get_cards_from_disk()
    gen = CardFactoryGenerator(list(cards))
    gen.generate_class_file()    
