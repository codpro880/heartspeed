# A sample Makefile for building Google Test and using it in user
# tests.  Please tweak it to suit your environment and project.  You
# may want to move it to your project's root directory.
#
# SYNOPSIS:
#
#   make [all]  - makes everything.
#   make TARGET - makes the given target.
#   make clean  - removes all files generated by make.

.PHONY: test

# Points to the root of Google Test, relative to where this file is.
# Remember to tweak this if you move this file.
GTEST_DIR = googletest

# Flags passed to the preprocessor.
# Set Google Test's header directory as a system directory, such that
# the compiler doesn't generate warnings in Google Test headers.
CPPFLAGS += -isystem $(GTEST_DIR)/include

# CXX = /usr/local/opt/llvm/bin/clang

# Flags passed to the C++ compiler.
CXXFLAGS += -std=c++17 -g -Wall -Wextra -pthread
# CXXFLAGS += -std=c++17 -g -Wall -Wextra -pthread -L/usr/local/lib -fopenmp
#CXXFLAGS += -std=c++17 -g -Wall -Wextra -L/usr/local/lib -fopenmp
# CXXFLAGS += -std=c++17 -g -Wall -Wextra

# GTEST has a warning: I don't want it in the build, so I removed the -Wextra flag...
CXXFLAGS_GTEST += -std=c++17 -g -Wall -pthread
#CXXFLAGS_GTEST += -std=c++17 -g -Wall -pthread -L/usr/local/lib -fopenmp
#CXXFLAGS_GTEST += -std=c++17 -g -Wall -L/usr/local/lib -fopenmp
#CXXFLAGS_GTEST += -std=c++17 -g -Wall

# All tests produced by this Makefile.  Remember to add new tests you
# created to the list.
TESTS = unittest

# All Google Test headers.  Usually you shouldn't change this
# definition.
GTEST_HEADERS = $(GTEST_DIR)/include/gtest/*.h \
                $(GTEST_DIR)/include/gtest/internal/*.h

# House-keeping build targets.

UNIT_TEST_FILES = $(shell find .. -name '*_test.cpp')
# $(info $$UNIT_TEST_FILES is [${UNIT_TEST_FILES}]) # DEBUG


UNIT_TEST_DEPS = $(shell find .. -name '*.o' ! -name '*_test.o')
# UNIT_TEST_DEPS := $(UNIT_TEST_FILES:_test.cpp=.o)
# $(info $$UNIT_TEST_DEPS is [${UNIT_TEST_DEPS}]) # DEBUG

UNIT_TEST_TARGETS := $(UNIT_TEST_FILES:_test.cpp=_test.o)
# $(info $$UNIT_TEST_TARGETS is [${UNIT_TEST_TARGETS}]) # DEBUG


all : $(TESTS)

clean :
	rm -f $(TESTS) gtest.a gtest_main.a *.o

# Builds gtest.a and gtest_main.a.

# Usually you shouldn't tweak such internal variables, indicated by a
# trailing _.
GTEST_SRCS_ = $(GTEST_DIR)/src/*.cc $(GTEST_DIR)/src/*.h $(GTEST_HEADERS)

# For simplicity and to avoid depending on Google Test's
# implementation details, the dependencies specified below are
# conservative and not optimized.  This is fine as Google Test
# compiles fast and for ordinary users its source rarely changes.
gtest-all.o : $(GTEST_SRCS_)
	$(CXX) $(CPPFLAGS) -I$(GTEST_DIR) $(CXXFLAGS_GTEST) -c \
            $(GTEST_DIR)/src/gtest-all.cc

gtest_main.o : $(GTEST_SRCS_)
	$(CXX) $(CPPFLAGS) -I$(GTEST_DIR) $(CXXFLAGS_GTEST) -c \
            $(GTEST_DIR)/src/gtest_main.cc

gtest.a : gtest-all.o
	$(AR) $(ARFLAGS) $@ $^

gtest_main.a : gtest-all.o gtest_main.o
	$(AR) $(ARFLAGS) $@ $^

# A test should link with either gtest.a or
# gtest_main.a, depending on whether it defines its own main()
# function.

%_test.o: %_test.cpp %.hpp $(GTEST_HEADERS)
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $<

# This rule is a bit complex, and it's not autoroping in the deps of the target. Improve it if you can!
unittest: $(UNIT_TEST_DEPS) $(UNIT_TEST_TARGETS) gtest_main.a
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -lpthread $(UNIT_TEST_DEPS) $(notdir ${UNIT_TEST_TARGETS}) gtest_main.a -o $@

test: unittest
	./unittest

# Update this if you add another test bin
test_all: unittest
	./unittest
